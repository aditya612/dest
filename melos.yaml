# https://medium.com/flutter-community/managing-multi-package-flutter-projects-with-melos-c8ce96fa7c82
name: dest

packages:
  # - utility/**
  # - features/**
  - packages/**
  # - '*'

scripts:
  lint:all:
    run: melos run analyze && melos run format
    description: Run all static analysis checks

  test:selective_unit_test:
    run: melos exec --dir-exists="test" --fail-fast -- flutter test --no-pub --coverage
    description: Run Flutter tests for a specific package in this project.
    select-package:
      flutter: true
      dir-exists: test

  test:
    run: melos run test:selective_unit_test --no-select
    description: Run all Flutter tests in this project.

  analyze:
    run: melos exec -- flutter analyze .
    description: Run `dart analyze` in all packages.

  gen_coverage: melos exec -- "\$MELOS_ROOT_PATH/combine_coverage.sh"

  postclean: >
    melos exec -- \
      rm -rf ./build ./android/.gradle ./ios/.symlinks ./ios/Pods ./android/.idea ./.idea ./.dart-tool/build

  # Clean things very deeply, can be used to establish "pristine checkout" status
  clean:deep: >
    git clean -x -d -f -q

  # Additional cleanup lifecycle script, executed when `melos clean` is ran.
  # postclean: >
  #   melos exec -c 6 -- "flutter clean"
  # Run all targets generally expected in CI for a full local quality check
  qualitycheck: >
    melos run clean:deep && melos clean && melos bootstrap && melos run lint:all && melos run build:all && melos run test:all
dev_dependencies:
  pedantic: 1.8.0    
